
############### python manage.py runserver 0.0.0.0:8000 ##################

############################## a2/views.py ###############################

#from django.shortcuts import render

# Create your views here.

from django.http import HttpResponse
from .models import C, F

def index(request):
    return HttpResponse("Hello, world.")

#def city(request, city_id):
#    city = Cities.objects.filter(id=city_id)
#    return HttpResponse(city)

def celsius(request, city_id):
    c  = 'None'
    query = C.objects.filter(city=city_id)
    for i in query:
        c = i.temp_c
    return HttpResponse("%s Degrees C" % c)

def fahrenheit(request, city_id):
    f = 'None'
    query = F.objects.filter(city=city_id)
    for i in query:
        f = i.temp_f
    return HttpResponse("%s Degrees F" % f)

############################## a2/urls.py ###############################

from django.conf.urls import url

from . import views

urlpatterns = [
    url(r'^$', views.index, name='index'),
    #url(r'^(?P<city_id>[0-9]+)/$', views.city, name='city'),
    url(r'^(?P<city_id>[1-4]+)/celsius/$', views.celsius, name='celsius'),
    url(r'^(?P<city_id>[1-4]+)/fahrenheit/$', views.fahrenheit, name='fahrenheit'),
]

############################## a2/models.py ###############################

# Create your models here.

from django.db import models
from django.utils.encoding import python_2_unicode_compatible

@python_2_unicode_compatible  # only if you need to support Python 2
class C(models.Model):
    temp_c = models.IntegerField(default=0)
    city = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
    def __str__(self):
        return str(self.temp_c)

@python_2_unicode_compatible  # only if you need to support Python 2
class F(models.Model):
    temp_f = models.IntegerField(default=0)
    city = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
    def __str__(self):
        return str(self.temp_f)


############################## mange.py shell ###############################

python manage.py shell

# city 1 = ny
# city 2 = no
# city 3 = bs
# city 4 = sf

>>> from a2.models import C, F
>>> C.objects.all()
<QuerySet []>
>>> from django.utils import timezone
>>> c = C(temp_c="12", city="1", pub_date=timezone.now())
>>> c.save()
>>> c = C(temp_c="14", city="2", pub_date=timezone.now())
>>> c.save()
>>> c = C(temp_c="16", city="3", pub_date=timezone.now())
>>> c.save()
>>> c = C(temp_c="18", city="4", pub_date=timezone.now())
>>> c.save()
>>> C.objects.all()
<QuerySet [<C: 12>, <C: 14>, <C: 16>, <C: 18>]>
>>>

##############################  Update Models ###############################

UPDATE MODELS:

python manage.py makemigrations a2
python manage.py sqlmigrate a2 0002
python manage.py migrate

FLUSH DATA FROM DATA TABLES:

python manage.py flush

DROP ALL TABLES:

python manage.py sqlflush

##############################  Lab6/urls.py ###############################

"""Lab6 URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/1.10/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.conf.urls import url, include
    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))
"""
from django.conf.urls import include, url
from django.contrib import admin
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    url(r'^', include('a2.urls')),
    url(r'^a2/', include('a2.urls')),
    url(r'^admin/', admin.site.urls),
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

##############################  a2/templates/index.py ###############################

{% if latest_temp %}
    <ul>
    {% for temp in latest_temp %}
        <li><a href="/a2/{{ temp.id }}/">{{ temp.temp_c }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No temperature readings are available.</p>
{% endif %}

#############################################################################
